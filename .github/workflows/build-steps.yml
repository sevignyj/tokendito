name: multibuild
on:
    push:
        tags:
        - '[0-9]+.[0-9]+.[0-9]+'

env:
    REGISTRY: docker.io
    REGISTRY_IMAGE: jpsevigny/jptest

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push amd64
        id: buildamd64
        run: |
          docker buildx version
          docker --version
          echo "docker buildx build . --provenance=false --platform linux/amd64 --tag ${{env.REGISTRY}}/${{env.REGISTRY_IMAGE}}:${{steps.meta.outputs.version}}-amd64 --push"
          docker buildx build . --provenance=false --platform linux/amd64 --tag ${{env.REGISTRY}}/${{env.REGISTRY_IMAGE}}:${{steps.meta.outputs.version}}-amd64 --push

        env:
          DOCKER_CONTENT_TRUST: 1
          BUILDX_NO_DEFAULT_ATTESTATIONS: 1
      - 
        name: Build and push arm64
        id: buildarm64
        run: |
          docker buildx version
          docker --version
          echo "docker buildx build . --provenance=false --platform linux/arm64 --tag ${{env.REGISTRY}}/${{env.REGISTRY_IMAGE}}:${{steps.meta.outputs.version}}-arm64 --push"
          docker buildx build . --provenance=false --platform linux/arm64 --tag "${{env.REGISTRY}}/${{env.REGISTRY_IMAGE}}:${{steps.meta.outputs.version}}-arm64" --push
          # DOCKER_CLI_EXPERIMENTAL=enabled docker manifest rm ${{env.REGISTRY_IMAGE}}:${{steps.meta.outputs.version}}-arm64
        env: 
          DOCKER_CONTENT_TRUST: 1
          BUILDX_NO_DEFAULT_ATTESTATIONS: 1

  create_manifest:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - 
        name: create manifest and push it
        run: |
          # docker buildx imagetools inspect --raw ${{env.REGISTRY_IMAGE}}:${{steps.meta.outputs.version}}-amd64 
          # docker buildx imagetools inspect --raw ${{env.REGISTRY_IMAGE}}:${{steps.meta.outputs.version}}-arm64 
          echo "version is ${{ steps.meta.outputs.version }}" 
          # DOCKER_CLI_EXPERIMENTAL=enabled docker manifest create ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }} ${{env.REGISTRY_IMAGE}}:${{steps.meta.outputs.version}}-amd64 ${{env.REGISTRY_IMAGE}}:${{steps.meta.outputs.version}}-arm64
          # docker manifest push ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }} 
        env: 
          DOCKER_CONTENT_TRUST: 1
#  sign: 
#    runs-on: ubuntu-latest
#    needs: 
#      - create_manifest
#    # if: ${{ always() && contains(needs.*.result, 'failure') }}
#    steps:
#      -
#        name: Docker meta
#        id: meta
#        uses: docker/metadata-action@v4
#        with:
#          images: ${{ env.REGISTRY_IMAGE }}
#      -
#        name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#      - 
#        name: pull image 
#        run: |
#          echo "docker pull ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}"
#          docker pull ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
#        env: 
#          DOCKER_CONTENT_TRUST: 0
#      -
#        name: setup trust signature
#        run: | 
#          mkdir -p ~/.docker/trust/private
#          echo "${DOCKER_PRIVATE_KEY}" > ~/.docker/trust/private/${DOCKER_PRIVATE_KEY_ID}.key
#          chmod 0600 ~/.docker/trust/private/${DOCKER_PRIVATE_KEY_ID}.key
#          docker trust key load ~/.docker/trust/private/${DOCKER_PRIVATE_KEY_ID}.key --name "${DOCKER_PRIVATE_KEY_ID}"
#        env:
#          DOCKER_PRIVATE_KEY_ID: "${{ secrets.DOCKER_PRIVATE_KEY_ID }}"
#          DOCKER_PRIVATE_KEY: "${{ secrets.DOCKER_PRIVATE_KEY }}"
#          DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE: "${{ secrets.DOCKER_PRIVATE_KEY_PASSPHRASE }}"
#      - 
#        name: sign manifests and push to registry
#        run: |
#          docker trust sign ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
#          docker manifest push ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
#        env:
#          DOCKER_CONTENT_TRUST: 1
#          DOCKER_PRIVATE_KEY_ID: "${{ secrets.DOCKER_PRIVATE_KEY_ID }}"
#          DOCKER_PRIVATE_KEY: "${{ secrets.DOCKER_PRIVATE_KEY }}"
#          DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE: "${{ secrets.DOCKER_PRIVATE_KEY_PASSPHRASE }}"
#      - 
#        name: Verify signatures
#        run: |
#          docker trust inspect --pretty ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}